/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.demo.ntfyappapi.api;

import com.demo.ntfyappapi.dto.BookDTO;
import com.demo.ntfyappapi.dto.BookStatus;
import com.demo.ntfyappapi.dto.request.BooksIdApprovePatchRequest;
import com.demo.ntfyappapi.dto.request.BooksIdRejectPatchRequest;
import com.demo.ntfyappapi.dto.request.BooksIdRequestApprovalPatchRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;

import jakarta.annotation.Generated;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-03-21T17:06:44.498786400+07:00[Asia/Bangkok]", comments = "Generator version: 7.7.0")
@Validated
@Tag(name = "Books", description = "Book management operations")
public interface BooksApi {

    default BooksApiDelegate getDelegate() {
        return new BooksApiDelegate() {};
    }

    /**
     * GET /books : Retrieve all books
     *
     * @param status Filter books by status (optional)
     * @return Successfully retrieved books (status code 200)
     */
    @Operation(
        operationId = "booksGet",
        summary = "Retrieve all books",
        tags = { "Books" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved books", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = BookDTO.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/books",
        produces = { "application/json" }
    )
    
    default Flux<ResponseEntity<BookDTO>> booksGet(
        @Parameter(name = "status", description = "Filter books by status", in = ParameterIn.QUERY) @Valid @RequestParam(value = "status", required = false) BookStatus status
    ) {
        return getDelegate().booksGet(status);
    }


    /**
     * PATCH /books/{id}/approve : Approve a book
     *
     * @param id  (required)
     * @param booksIdApprovePatchRequest  (optional)
     * @return Book approved successfully (status code 200)
     *         or Book not found (status code 404)
     */
    @Operation(
        operationId = "booksIdApprovePatch",
        summary = "Approve a book",
        tags = { "Books" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Book approved successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BookDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Book not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/books/{id}/approve",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<BookDTO>> booksIdApprovePatch(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "BooksIdApprovePatchRequest", description = "") @Valid @RequestBody(required = false) BooksIdApprovePatchRequest booksIdApprovePatchRequest
    ) {
        return getDelegate().booksIdApprovePatch(id, booksIdApprovePatchRequest);
    }


    /**
     * DELETE /books/{id} : Delete a book
     *
     * @param id  (required)
     * @return Book deleted successfully (status code 204)
     *         or Book not found (status code 404)
     */
    @Operation(
        operationId = "booksIdDelete",
        summary = "Delete a book",
        tags = { "Books" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Book deleted successfully"),
            @ApiResponse(responseCode = "404", description = "Book not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/books/{id}"
    )
    
    default Mono<ResponseEntity<Void>> booksIdDelete(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return getDelegate().booksIdDelete(id);
    }


    /**
     * GET /books/{id} : Retrieve a specific book by ID
     *
     * @param id  (required)
     * @return Successfully retrieved book (status code 200)
     *         or Book not found (status code 404)
     */
    @Operation(
        operationId = "booksIdGet",
        summary = "Retrieve a specific book by ID",
        tags = { "Books" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved book", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BookDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Book not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/books/{id}",
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<BookDTO>> booksIdGet(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return getDelegate().booksIdGet(id);
    }


    /**
     * PUT /books/{id} : Update an existing book
     *
     * @param id  (required)
     * @param bookDTO  (required)
     * @return Book updated successfully (status code 200)
     *         or Invalid input (status code 400)
     *         or Book not found (status code 404)
     */
    @Operation(
        operationId = "booksIdPut",
        summary = "Update an existing book",
        tags = { "Books" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Book updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BookDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "404", description = "Book not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/books/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<BookDTO>> booksIdPut(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "BookDTO", description = "", required = true) @Valid @RequestBody BookDTO bookDTO
    ) {
        return getDelegate().booksIdPut(id, bookDTO);
    }


    /**
     * PATCH /books/{id}/reject : Reject a book
     *
     * @param id  (required)
     * @param booksIdRejectPatchRequest  (optional)
     * @return Book rejected successfully (status code 200)
     *         or Book not found (status code 404)
     */
    @Operation(
        operationId = "booksIdRejectPatch",
        summary = "Reject a book",
        tags = { "Books" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Book rejected successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BookDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Book not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/books/{id}/reject",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<BookDTO>> booksIdRejectPatch(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "BooksIdRejectPatchRequest", description = "") @Valid @RequestBody(required = false) BooksIdRejectPatchRequest booksIdRejectPatchRequest
    ) {
        return getDelegate().booksIdRejectPatch(id, booksIdRejectPatchRequest);
    }


    /**
     * PATCH /books/{id}/request-approval : Request approval for a book
     *
     * @param id  (required)
     * @param booksIdRequestApprovalPatchRequest  (optional)
     * @return Approval requested successfully (status code 200)
     *         or Book not found (status code 404)
     */
    @Operation(
        operationId = "booksIdRequestApprovalPatch",
        summary = "Request approval for a book",
        tags = { "Books" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Approval requested successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BookDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Book not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/books/{id}/request-approval",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<BookDTO>> booksIdRequestApprovalPatch(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "BooksIdRequestApprovalPatchRequest", description = "") @Valid @RequestBody(required = false) BooksIdRequestApprovalPatchRequest booksIdRequestApprovalPatchRequest
    ) {
        return getDelegate().booksIdRequestApprovalPatch(id, booksIdRequestApprovalPatchRequest);
    }


    /**
     * POST /books : Create a new book
     *
     * @param bookDTO  (required)
     * @return Book created successfully (status code 201)
     *         or Invalid input (status code 400)
     */
    @Operation(
        operationId = "booksPost",
        summary = "Create a new book",
        tags = { "Books" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Book created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BookDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/books",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<BookDTO>> booksPost(
        @Parameter(name = "BookDTO", description = "", required = true) @Valid @RequestBody BookDTO bookDTO
    ) {
        return getDelegate().booksPost(bookDTO);
    }

}
